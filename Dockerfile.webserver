# Build stage for Go WASM and CSS
FROM golang:1.21-alpine AS go-builder

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy frontend source
COPY frontend/ ./frontend/

# Build WASM
RUN GOOS=js GOARCH=wasm go build -o main.wasm ./frontend/main.go

# Copy webserver source
COPY cmd/webserver/ ./cmd/webserver/

# Build webserver
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o webserver ./cmd/webserver

# Node.js stage for CSS build
FROM node:18-alpine AS node-builder

WORKDIR /app

# Install bun
RUN npm install -g bun

# Copy package files
COPY package.json bun.lockb ./

# Install dependencies
RUN bun install

# Copy static files and build CSS
COPY static/ ./static/
COPY tailwind.config.js ./

# Build CSS
RUN bun run build-css

# Final stage
FROM alpine:latest

# Install ca-certificates and wget for health checks
RUN apk --no-cache add ca-certificates wget

WORKDIR /root/

# Copy webserver binary
COPY --from=go-builder /app/webserver .

# Copy static files
COPY --from=go-builder /app/main.wasm ./static/
COPY --from=node-builder /app/static/output.css ./static/
COPY static/ ./static/

# Expose webserver port
EXPOSE 8080

# Set default environment variables
ENV IRC_DAEMON_URL=http://localhost:8081
ENV PORT=8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Run the webserver
CMD ["./webserver"]
